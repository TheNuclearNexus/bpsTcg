@on compile
@require nexus:ncstd/collections

var ids = new TypedList<int>()

define class Card : IComparable {
    public var name : string
    public var desc : string
    public var type : string
    public var class : string
    public var power : int
    public var health : int
    public var roll : int
    public var cost : int
    public var rarity : string
    public var cmd : int
    public var id : int = 0
    
    public var item : item
    
    public new(name : string, desc : string, type : string, class : string, power : int, health : int, roll : int, cost : int, rarity : string, cmd : int) {
        eval this.name = name
        eval this.desc = desc
        eval this.type = type
        eval this.class = class
        eval this.power = power
        eval this.health = health
        eval this.roll = roll
        eval this.cost = cost
        eval this.rarity = rarity
        eval this.cmd = cmd
        
        eval this.item = toItem()
    }
    
    private toItem() : item {
        var color : string = "white"
        switch(type) {
            case "Aquatic": {
                eval color = "blue"
                break
            }
            case "Hellish": {
                eval color = "red"
                break
            }
            case "Undead": {
                eval color = "dark_gray"
                break
            }
            case "Ender": {
                eval color = "dark_purple"
                break
            }
            case "Terrestrial": {
                eval color = "green"
                break
            }
        }
        
        var lore : list = []
        
        do if(class == "Unit") {
            eval lore = [
                text_component<[{"text":$desc,"italic": false,"color":"gray"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Info","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Class: ", "color":"gold","italic":false},{"text":$class,"color":"white"}]>,
                text_component<[{"text":"Rarity: ", "color":"gold","italic":false},{"text":$rarity,"color":"white"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Stats","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Health: ", "color":"gold","italic":false},{"text":$health,"color":"white"}]>,
                text_component<[{"text":"Power: ", "color":"gold","italic":false},{"text":$power,"color":"white"}]>,
                text_component<[{"text":"Roll: ", "color":"gold","italic":false},{"text":$roll,"color":"white"}]>,
                text_component<[{"text":"Cost: ", "color":"gold","italic":false},{"text":$cost,"color":"white"}]>
            ]
        } else if (class == "Land") {
            eval lore = [
                text_component<[{"text":$desc,"italic": false,"color":"gray"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Info","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Class: ", "color":"gold","italic":false},{"text":$class,"color":"white"}]>,
                text_component<[{"text":"Rarity: ", "color":"gold","italic":false},{"text":$rarity,"color":"white"}]>
            ]
        }
        
        for(var i = 0; i < name.length; i++) {
            var p = Character.toCodePoint(name[i])
            var mod = (int)Math.pow(2, i)
            eval id += p*mod
        }
        do if(ids.contains(id)) throw "Id '" + id + "' was already generated!"
        eval ids.add(id)
        
        return item<clock#$cmd{
            bps_tcg:{
                card:1b,
                name: ${(tag_string)name},
                desc: ${(tag_string)desc},
                type: ${(tag_string)type},
                class: ${(tag_string)class},
                power: ${(tag_int)power},
                max_health: ${(tag_int)health},
                health: ${(tag_int)health},
                roll: ${(tag_int)roll},
                cost: ${(tag_int)cost},
                id: ${(tag_int)id}
            },
            display:{
                Name:${
                    text_component<[{"text":${"- " + name + " -"},"italic":false,"color":$color}]>
                },
                Lore: ${new nbt(lore)}
            }
        }>
    }
    
    public override compareTo(b : IComparable) : int {
        var card : Card = (Card)b
        return this.id - card.id
    }
}

var content : string = File.in.read("other/bps_cards.tsv")
var lines : TypedList<string> = new TypedList<string>(content.split('\n'))
var cards : TypedList<Card> = new TypedList<Card>()
var lands : TypedList<int> = new TypedList<int>()
var units : TypedList<int> = new TypedList<int>()

var emptyCriteria : dictionary = {
        "trigger":"impossible",
        "conditions":{}
    }

var aAdv : dictionary = JSON.parse(File.in.read("datapack/data/bps_tcg/advancements/collectors/aquatic.json"))
var hAdv : dictionary = JSON.parse(File.in.read("datapack/data/bps_tcg/advancements/collectors/hellish.json"))
var uAdv : dictionary = JSON.parse(File.in.read("datapack/data/bps_tcg/advancements/collectors/undead.json"))
var eAdv : dictionary = JSON.parse(File.in.read("datapack/data/bps_tcg/advancements/collectors/ender.json"))
var tAdv : dictionary = JSON.parse(File.in.read("datapack/data/bps_tcg/advancements/collectors/terrestrial.json"))


var typedCards : TypedList<TypedList<int>> = new TypedList<TypedList<int>>( 
    [
        new TypedList<int>(),
        new TypedList<int>(),
        new TypedList<int>(),
        new TypedList<int>(),
        new TypedList<int>(),
        new TypedList<int>()
    ] 
)

var mobs : TypedList<int> = new TypedList<int>()
var modelOffset : int = 4259000

var aC : int = 0
var hC : int = 0
var uC : int = 0
var eC : int = 0
var cC : int = 0
var tC : int = 0

var calcRarity : function = function(rarity : string) : int {
    var weight : int = 200
    switch(rarity) {
        case "Common": {
            eval weight = 250
            break
        }
        case "Uncommon": {
            eval weight = 200
            break
        }
        case "Rare": {
            eval weight = 150
            break
        }
        case "Legendary": {
            eval weight = 75
            break
        }
        case "Ultra Legendary": {
            eval weight = 25
            break
        }
    }
    return weight
}

var genLootTable = function(input : TypedList<int>, rolls : int, path : string) {
    var lootTable : dictionary = {
        "pools": [
            {
                "rolls": rolls,
                "entries": [
                    
                ]
            }
        ]
    }


    for(u in input) {
        var weight : int = calcRarity(cards[u].rarity)
        
        eval lootTable["pools"][0]["entries"].add(
            {
                "type": "minecraft:item",
                "name": "minecraft:clock",
                "weight": weight,
                "functions": [
                    {
                        "function": "minecraft:set_nbt",
                        "tag": (cards[u].item.itemTag)
                    }
                ]
            }
        )

    }
    eval File.out.writeData(path, JSON.stringify(lootTable))
}

var genPackLootTable = function(input : TypedList<int>, path : string) {
    var lootTable : dictionary = {
        "pools": [
            {
                "rolls": 5,
                "entries": [
                    
                ]
            }, 
            {
                "rolls": 3,
                "entries": [
                    
                ]
            }
        ]
    }


    for(u in input) {
        var weight : int = calcRarity(cards[u].rarity)
        
        eval lootTable["pools"][cards[u].class == "Unit" ? 0 : 1]["entries"].add(
            {
                "type": "minecraft:item",
                "name": "minecraft:clock",
                "weight": weight,
                "functions": [
                    {
                        "function": "minecraft:set_nbt",
                        "tag": (cards[u].item.itemTag)
                    }
                ]
            }
        )
    }
    
    eval File.out.writeData(path, JSON.stringify(lootTable))
}