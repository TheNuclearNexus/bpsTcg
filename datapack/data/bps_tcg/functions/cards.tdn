define class Card {
    public var name : string
    public var desc : string
    public var type : string
    public var class : string
    public var power : int
    public var health : int
    public var roll : int
    public var cost : int
    public var rarity : string
    public var cmd : int
    
    public new(name : string, desc : string, type : string, class : string, power : int, health : int, roll : int, cost : int, rarity : string, cmd : int) {
        eval this.name = name
        eval this.desc = desc
        eval this.type = type
        eval this.class = class
        eval this.power = power
        eval this.health = health
        eval this.roll = roll
        eval this.cost = cost
        eval this.rarity = rarity
        eval this.cmd = cmd
    }
    
    public toItem() : item {
        var color : string = "white"
        switch(type) {
            case "Aquatic": {
                eval color = "blue"
                break
            }
            case "Hellish": {
                eval color = "red"
                break
            }
            case "Undead": {
                eval color = "dark_gray"
                break
            }
            case "Ender": {
                eval color = "dark_purple"
                break
            }
            case "Terrestrial": {
                eval color = "green"
                break
            }
        }
        
        var lore : list = []
        
        do if(class == "Unit") {
            eval lore = [
                text_component<[{"text":$desc,"italic": false,"color":"gray"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Info","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Class: ", "color":"gold","italic":false},{"text":$class,"color":"white"}]>,
                text_component<[{"text":"Rarity: ", "color":"gold","italic":false},{"text":$rarity,"color":"white"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Stats","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Health: ", "color":"gold","italic":false},{"text":$health,"color":"white"}]>,
                text_component<[{"text":"Power: ", "color":"gold","italic":false},{"text":$power,"color":"white"}]>,
                text_component<[{"text":"Roll: ", "color":"gold","italic":false},{"text":$roll,"color":"white"}]>,
                text_component<[{"text":"Cost: ", "color":"gold","italic":false},{"text":$cost,"color":"white"}]>
            ]
        } else if (class == "Land") {
            eval lore = [
                text_component<[{"text":$desc,"italic": false,"color":"gray"}]>,
                '[{"text":"--- ","italic": false,"color":"dark_gray"},{"text":"Info","italic": false,"color":"white"}," ---"]',
                text_component<[{"text":"Class: ", "color":"gold","italic":false},{"text":$class,"color":"white"}]>,
                text_component<[{"text":"Rarity: ", "color":"gold","italic":false},{"text":$rarity,"color":"white"}]>
            ]
        }
        
        
        
        return item<clock#$cmd{
            bps_tcg:{
                card:1b,
                name: ${(tag_string)name},
                desc: ${(tag_string)desc},
                type: ${(tag_string)type},
                class: ${(tag_string)class},
                power: ${(tag_int)power},
                max_health: ${(tag_int)health},
                health: ${(tag_int)health},
                roll: ${(tag_int)roll},
                cost: ${(tag_int)cost}
            },
            display:{
                Name:${
                    text_component<[{"text":${"- " + name + " -"},"italic":false,"color":$color}]>
                },
                Lore: ${new nbt(lore)}
            }
        }>
    }
}

var content : string = File.in.read("other/bps_cards.tsv")
var lines : TypedList<string> = new TypedList<string>(content.split('\n'))
var cards : TypedList<Card> = new TypedList<Card>()
var lands : TypedList<int> = new TypedList<int>()
var units : TypedList<int> = new TypedList<int>()
var mobs : TypedList<int> = new TypedList<int>()
var modelOffset : int = 4259000

var aC : int = 0
var hC : int = 0
var uC : int = 0
var eC : int = 0
var cC : int = 0
var tC : int = 0

for(var i = 1; i < lines.length; i++) {
    var values : TypedList<string> = new TypedList<string>(lines[i].split('\t'))
    
    switch(values[2]) {
        case "Aquatic": {
            eval aC++
            break
        }
        case "Hellish": {
            eval hC++
            break
        }
        case "Undead": {
            eval uC++
            break
        }
        case "Ender": {
            eval eC++
            break
        }
        case "CUM": {
            eval cC++
            break
        }
        case "Terrestrial": {
            eval tC++
            break
        }
    }
    
    var c = new Card(
            name: values[0],
            desc: values[1],
            type: values[2],
            class: values[3],
            power: Integer.parseInt(values[4]),
            health: Integer.parseInt(values[5]),
            roll: Integer.parseInt(values[6]),
            cost: Integer.parseInt(values[7]),
            rarity: values[8],
            cmd: modelOffset + i
        )
    
    eval cards.add(c)
    
    switch(values[3]) {
        case "Unit": {
            eval units.add(i - 1)
            break
        }
        case "Mob": {
            eval mobs.add(i - 1)
            break
        }
        case "Land": {
            eval lands.add(i - 1)
            break
        }
    }
}

log info "Aquatic: " + aC + "\nHellish: " + aC + "\nUndead: " + uC + "\nEnder: " + eC + "\nTerrestrial: " + tC + "\nCUM: " + cC
log info "Units: " + units.length + "\nMobs: " + mobs.length + "\nLands: " + lands.length

for(var i = 0; i <= (cards.length / 10); i++) {
    define function ${Reflection.getWritingFile().resolve("set_" + i)} {
        for(var c = i*10; c < (i+1) * 10 && c < cards.length; c++) {
            give @s ${cards[c].toItem()}
        }
    }
}


var genLootTable = function(input : TypedList<int>, rolls : int, path : string) {
    var lootTable : dictionary = {
        "pools": [
            {
                "rolls": rolls,
                "entries": [
                    
                ]
            }
        ]
    }


    for(u in input) {
        var weight : int = 200
        switch(cards[u].rarity) {
            case "Common": {
                eval weight = 250
                break
            }
            case "Uncommon": {
                eval weight = 200
                break
            }
            case "Rare": {
                eval weight = 150
                break
            }
            case "Legendary": {
                eval weight = 75
                break
            }
            case "Ultra Legendary": {
                eval weight = 25
                break
            }
        }
        
        eval lootTable["pools"][0]["entries"].add(
            {
                "type": "minecraft:item",
                "name": "minecraft:clock",
                "weight": weight,
                "functions": [
                    {
                        "function": "minecraft:set_nbt",
                        "tag": (cards[u].toItem().itemTag)
                    }
                ]
            }
        )

    }
    eval File.out.writeData(path, JSON.stringify(lootTable))
}

eval genLootTable(units, 3, "data/bps_tcg/loot_tables/cards/units.json")
eval genLootTable(lands, 5, "data/bps_tcg/loot_tables/cards/lands.json")